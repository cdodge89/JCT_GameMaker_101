<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bat_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the Bat
image_speed = .1;

//Movement variables
hspd = 0;
vspd = 0;
spd = 4;

sight = 360;

chase = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!chase){
    //bat_idle_state
    image_index = spr_bat_idle;
    
    if(instance_exists(obj_player)){
        var dis = point_distance(x,y,obj_player.x,obj_player.y);
        
        if(dis &lt; sight){
            chase = true;
        }
    }
} else{
    //bat chase state
    if(instance_exists(obj_player)){
        var dir = point_direction(x,y,obj_player.x,obj_player.y);
        hspd = lengthdir_x(spd,dir);
        vspd = lengthdir_y(spd, dir);
        
        sprite_index = spr_bat_chase;
        
        if(hspd!= 0) image_xscale = -sign(hspd);
    }
    //Horizontal Collision
    if(place_meeting(x+hspd,y,obj_solid)){
        while(!place_meeting(x+sign(hspd),y,obj_solid)){
            x += sign(hspd);
        }
        hspd = 0;
    }


    //Vertical Collision
    if(place_meeting(x,y+vspd,obj_solid)){
        while(!place_meeting(x,y+sign(vspd),obj_solid)){
            y += sign(vspd);
        }
        vspd = 0;
    }
    
    x+=hspd;
    y+=vspd;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
